from fastapi import APIRouter, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram import Bot
from telegram import Message
from app.config import get_settings
from app.trello.client import TrelloClient
from app.ai.processor import AIProcessor
from app.bot.state_manager import state_manager
try:
    from app.utils.context import context_analyzer
except ImportError:
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    context_analyzer = None
    logger.warning("Context analyzer not available")
import logging
from typing import List, Dict, Any, Optional
from telegram.ext import ContextTypes
from app.services.trello import TrelloService
from app.models.user import User
from app.utils.localization import localization
from app.utils.logger import app_logger
from app.db.session import SessionLocal
from sqlalchemy.orm import Session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
router = APIRouter(prefix="/webhook", tags=["telegram"])
settings = get_settings()
trello_client = TrelloClient()
ai_processor = AIProcessor()

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = [
        [KeyboardButton('üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'), KeyboardButton('üìä –ú–æ–∏ –¥–æ—Å–∫–∏')],
        [KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'), KeyboardButton('‚ùì –ü–æ–º–æ—â—å')]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
def get_board_keyboard(boards: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å–∫–∏"""
    keyboard = []
    for board in boards:
        keyboard.append([InlineKeyboardButton(
            board['name'],
            callback_data=f"board_{board['id']}"
        )])
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_boards")])
    return InlineKeyboardMarkup(keyboard)

def get_list_keyboard(lists: List[Dict[str, Any]], board_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–∏—Å–∫–∞"""
    keyboard = []
    for lst in lists:
        keyboard.append([InlineKeyboardButton(
            f"üìë {lst['name']}",
            callback_data=f"list_{lst['id']}"
        )])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –¥–æ—Å–∫–∞–º", callback_data="back_to_boards")])
    return InlineKeyboardMarkup(keyboard)

# –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     
async def handle_list_selection(update: Update, list_id: str):
    try:
        lst = await trello_client.get_list(list_id)
        cards = await trello_client.get_list_cards(list_id)
        
        reply_text = f"üìã *–°–ø–∏—Å–æ–∫: {lst['name']}*\n"
        reply_text += f"_–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lst.get('dateLastActivity', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}_\n\n"
        
        if cards:
            reply_text += "*–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:*\n"
            for card in cards:
                # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∂–∏—Ä–Ω—ã–º)
                reply_text += f"‚Ä¢ *{card['name']}*\n"
                
                # –ú–µ—Ç–∫–∏ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º
                if card.get('labels'):
                    labels = []
                    for label in card['labels']:
                        color_emoji = {
                            'green': 'üü¢',
                            'yellow': 'üü°',
                            'orange': 'üü†',
                            'red': 'üî¥',
                            'purple': 'üü£',
                            'blue': 'üîµ',
                            'sky': 'üí†',
                            'lime': 'üíö',
                            'pink': 'üíó',
                            'black': '‚ö´'
                        }.get(label.get('color', ''), '‚ö™')
                        label_text = label.get('name', label.get('color', '–º–µ—Ç–∫–∞'))
                        labels.append(f"{color_emoji}{label_text}")
                    if labels:
                        reply_text += f"  _{' '.join(labels)}_\n"
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å —á–µ–∫-–ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if card.get('badges', {}).get('checkItems', 0) > 0:
                    total = card['badges']['checkItems']
                    checked = card['badges'].get('checkItemsChecked', 0)
                    reply_text += f"  ‚úì {checked}/{total}\n"
                
                # –£—á–∞—Å—Ç–Ω–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –Ω–∏–∫–Ω–µ–π–º—ã)
                if card.get('idMembers'):
                    members = await trello_client.get_card_members(card['id'])
                    if members:
                        usernames = [m.get('username', '') for m in members if m.get('username')]
                        if usernames:
                            reply_text += f"  üë• {', '.join(usernames)}\n"
                
                # –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫—É—Ä—Å–∏–≤–æ–º)
                if card.get('dateLastActivity'):
                    date_str = card['dateLastActivity'][:10]
                    reply_text += f"  _–û–±–Ω–æ–≤–ª–µ–Ω–æ: {date_str}_\n"
                
                reply_text += "\n"
        else:
            reply_text += "_–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç_\n\n"
        
        reply_text += "üìù *–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:*\n"
        reply_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        reply_text += "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–æ –î–î.–ú–ú.YYYY'"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = state_manager.get_user_state(update.callback_query.from_user.id)
        user_state.selected_list_id = list_id
        user_state.selected_board_id = lst['idBoard']
        
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫–∞–º", callback_data=f"board_{lst['idBoard']}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_create")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(
            reply_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        print(f"Error in list selection: {e}")
        await update.callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–∏—Å–∫–µ."
        )
     
async def handle_board_selection(update: Update, board_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Å–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –Ω–∞ –¥–æ—Å–∫–µ
        lists = await trello_client.get_board_lists(board_id)
        
        keyboard = []
        reply_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:\n\n"
        
        for lst in lists:
            cards_count = len(await trello_client.get_list_cards(lst['id']))
            reply_text += f"üìë *{lst['name']}* ({cards_count} –∑–∞–¥–∞—á)\n"
            keyboard.append([InlineKeyboardButton(
                f"üìë {lst['name']}",
                callback_data=f"list_{lst['id']}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–æ—Å–∫–∞–º
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –¥–æ—Å–∫–∞–º", callback_data="back_to_boards")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(
            reply_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–æ—Å–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = state_manager.get_user_state(update.callback_query.from_user.id)
        user_state.selected_board_id = board_id
        
    except Exception as e:
        logger.error(f"Error in board selection: {e}")
        await update.callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤ –¥–æ—Å–∫–∏."
        )
        
# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_start(update: Update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_state = state_manager.get_user_state(update.message.from_user.id)
    user_state.clear()
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CreatmanTaskBot. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –≤ Trello.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –ü–µ—Ä–µ—Å—ã–ª–∞—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á\n"
        "2. –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞–ø—Ä—è–º—É—é\n"
        "3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å–∫–∞–º–∏ Trello",
        reply_markup=get_main_keyboard()
    )

# app/bot/handlers.py

async def handle_forwarded_messages(update: Update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("Starting handle_forwarded_messages")
    user_id = update.message.from_user.id
    user_state = state_manager.get_user_state(user_id)
    
    try:
        forward_info = {
            'text': update.message.text,
            'from_user': update.message.forward_from.username if update.message.forward_from else 'Unknown',
            'chat_id': update.message.forward_from_chat.id if update.message.forward_from_chat else None,
            'chat_title': update.message.forward_from_chat.title if update.message.forward_from_chat else None,
            'date': update.message.forward_date.isoformat() if update.message.forward_date else None
        }
        
        state_manager.add_forwarded_message(user_id, forward_info)
        messages = state_manager.get_forwarded_messages(user_id)
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="analyze_messages")
        ]])
        
        count_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(messages)}."
        await update.message.reply_text(count_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in handle_forwarded_messages: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def analyze_forwarded_messages(update: Update):
    """–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI"""
    user_id = update.callback_query.from_user.id
    user_state = state_manager.get_user_state(user_id)
    
    if not user_state.forwarded_messages:
        await update.callback_query.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
        
    try:
        context = {
            'boards': await trello_client.get_boards_with_details(),
            'preferences': state_manager.get_board_preferences(user_id),
            'chat_context': user_state.message_context
        }
        
        analysis = await ai_processor.analyze_messages(
            user_state.forwarded_messages,
            context
        )
        
        if not analysis:
            raise Exception("AI analysis failed")
            
        tasks = analysis.get('tasks', [])
        if not tasks:
            await update.callback_query.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."
            )
            return
            
        user_state.temp_data['analysis'] = analysis
        await show_analysis_results(update.callback_query.message, tasks)
        
    except Exception as e:
        logger.error(f"Error in analyze_forwarded_messages: {e}", exc_info=True)
        await update.callback_query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π."
        )

async def handle_direct_task_creation(update: Update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    user_id = update.message.from_user.id
    user_state = state_manager.get_user_state(user_id)
    
    try:
        task_analysis = await ai_processor.process_direct_task_creation(
            update.message.text
        )
        
        if task_analysis and task_analysis.get('tasks'):
            user_state.temp_data['analysis'] = task_analysis
            await show_analysis_results(update.message, task_analysis['tasks'])
        else:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
            )
            
    except Exception as e:
        logger.error(f"Error in direct task creation: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏."
        )

async def handle_task_creation_from_analysis(update: Update, task_index: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    user_id = update.callback_query.from_user.id
    user_state = state_manager.get_user_state(user_id)
    
    analysis = user_state.temp_data.get('analysis')
    if not analysis or 'tasks' not in analysis:
        await update.callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )
        return
    
    try:
        task_data = analysis['tasks'][task_index]
        board_info = task_data.get('recommended_board', {})
        
        # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã–±–æ—Ä–µ –¥–æ—Å–∫–∏ –≤—ã—Å–æ–∫–∞—è, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        if board_info.get('confidence', 0) > 0.7:
            task = await trello_client.create_task_from_analysis(task_data)
            if task:
                await show_task_creation_result(update.callback_query.message, task)
            else:
                raise Exception("Failed to create task")
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å–∫–∏
            await request_board_selection(
                update.callback_query.message,
                task_data,
                analysis['context_analysis'].get('project_hints', [])
            )
            
    except Exception as e:
        logger.error(f"Error creating task: {e}")
        await update.callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é."
        )

async def show_analysis_results(message, tasks: List[Dict]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á"""
    reply_text = "üìã *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
    
    for i, task in enumerate(tasks, 1):
        reply_text += f"{i}. *{task['name']}*\n"
        if task.get('description'):
            reply_text += f"üìù _{task['description']}_\n"
        if task.get('due_date'):
            reply_text += f"üìÖ –°—Ä–æ–∫: {task['due_date']}\n"
        if task.get('members'):
            reply_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(task['members'])}\n"
        if task.get('labels'):
            reply_text += f"üè∑ –ú–µ—Ç–∫–∏: {', '.join(task['labels'])}\n"
        
        board_info = task.get('recommended_board', {})
        if board_info.get('confidence', 0) > 0.7:
            reply_text += f"üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ—Å–∫–∞: *{board_info.get('name', '')}*\n"
            if board_info.get('reasoning'):
                reply_text += f"üí° _{board_info['reasoning']}_\n"
        
        reply_text += "\n"

    keyboard = []
    if len(tasks) == 1:
        keyboard.append([
            InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_analyzed_task_0")
        ])
    else:
        for i, _ in enumerate(tasks):
            keyboard.append([
                InlineKeyboardButton(f"‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É {i+1}", 
                                   callback_data=f"create_analyzed_task_{i}")
            ])

    keyboard.append([
        InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_analysis"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_analysis")
    ])

    if isinstance(message, Message):
        await message.reply_text(
            reply_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    else:
        await message.edit_text(
            reply_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def show_task_creation_result(message, task: Dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    reply_text = "‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n"
    reply_text += f"*{task['name']}*\n"
    
    if task.get('desc'):
        reply_text += f"üìù _{task['desc']}_\n"
    if task.get('due'):
        reply_text += f"üìÖ –°—Ä–æ–∫: {task['due'][:10]}\n"
    if task.get('labels'):
        labels = [f"#{label['name']}" for label in task['labels']]
        reply_text += f"üè∑ –ú–µ—Ç–∫–∏: {', '.join(labels)}\n"
    if task.get('members'):
        members = [member.get('username', 'Unknown') for member in task['members']]
        reply_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(members)}\n"
    
    keyboard = [
        [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Trello", url=task['url'])],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                               callback_data=f"edit_task_{task['id']}"),
            InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –µ—â—ë", 
                               callback_data="create_new_task")
        ]
    ]
    
    await message.edit_text(
        reply_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def request_board_selection(message, task_data: Dict, project_hints: List[Dict]):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ—Å–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    reply_text = "üìã *–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏:*\n\n"
    reply_text += f"–ó–∞–¥–∞—á–∞: *{task_data['name']}*\n\n"
    
    if project_hints:
        reply_text += "*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞:*\n"
        for hint in project_hints:
            reply_text += f"‚Ä¢ {hint['board_name']}: _{hint['reason']}_\n"
    
    boards = await trello_client.get_boards()
    keyboard = get_board_keyboard(boards)
    
    await message.edit_text(
        reply_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def handle_boards(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        boards = await trello_client.get_boards_with_details()
        if not boards:
            await message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å–æ–∫ –≤ Trello!",
                reply_markup=get_main_keyboard()
            )
            return
        
        reply_text = "üìã *–í–∞—à–∏ –¥–æ—Å–∫–∏ Trello:*\n\n"
        for board in boards:
            reply_text += f"*{board['name']}*\n"
            if board.get('desc'):
                reply_text += f"_{board['desc']}_\n"
            
            lists_count = len(board.get('lists', []))
            cards_count = sum(len(lst.get('cards', [])) for lst in board.get('lists', []))
            
            reply_text += f"üìë –°–ø–∏—Å–∫–æ–≤: {lists_count}\n"
            reply_text += f"üìå –ó–∞–¥–∞—á: {cards_count}\n"
            reply_text += f"[–û—Ç–∫—Ä—ã—Ç—å –≤ Trello]({board.get('url')})\n\n"
        
        keyboard = get_board_keyboard(boards)
        
        await message.reply_text(
            reply_text,
            reply_markup=keyboard,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error getting boards: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫.",
            reply_markup=get_main_keyboard()
        )

async def handle_edit_task(update: Update, task_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        task = await trello_client.get_card(task_id)
        if not task:
            raise Exception("Task not found")
        
        keyboard = [
            [InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{task_id}")],
            [InlineKeyboardButton("üìÖ –°—Ä–æ–∫", callback_data=f"edit_due_{task_id}")],
            [InlineKeyboardButton("üè∑ –ú–µ—Ç–∫–∏", callback_data=f"edit_labels_{task_id}")],
            [InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"edit_members_{task_id}")],
            [InlineKeyboardButton("üìã –ß–µ–∫-–ª–∏—Å—Ç", callback_data=f"edit_checklist_{task_id}")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_edit")]
        ]
        
        reply_text = f"*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n\n"
        reply_text += f"üìå *{task['name']}*\n"
        if task.get('desc'):
            reply_text += f"üìù _{task['desc']}_\n"
        if task.get('due'):
            reply_text += f"üìÖ –°—Ä–æ–∫: {task['due'][:10]}\n"
        if task.get('labels'):
            labels = [f"#{label['name']}" for label in task['labels']]
            reply_text += f"üè∑ –ú–µ—Ç–∫–∏: {', '.join(labels)}\n"
        if task.get('members'):
            members = [member.get('username', 'Unknown') for member in task['members']]
            reply_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(members)}\n"
        
        await update.callback_query.message.edit_text(
            reply_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error editing task: {e}")
        await update.callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏."
        )

async def handle_callback_query(update: Update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    
    try:
        if data.startswith('board_'):
            board_id = data.replace('board_', '')
            await handle_board_selection(update, board_id)
            
        elif data.startswith('list_'):
            list_id = data.replace('list_', '')
            await handle_list_selection(update, list_id)
            
        elif data == 'analyze_messages':
            await analyze_forwarded_messages(update)
            
        elif data.startswith('create_analyzed_task_'):
            task_index = int(data.split('_')[-1])
            await handle_task_creation_from_analysis(update, task_index)
            
        elif data.startswith('edit_task_'):
            task_id = data.replace('edit_task_', '')
            await handle_edit_task(update, task_id)
            
        elif data == 'refresh_boards':
            await handle_boards(query.message)
            
        elif data == 'back_to_boards':
            await handle_boards(query.message)
            
        elif data == 'cancel_analysis':
            user_state = state_manager.get_user_state(user_id)
            user_state.clear()
            await query.message.edit_text(
                "–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_keyboard()
            )
            
        elif data == 'close_edit':
            await query.message.delete()
            
        await query.answer()
        
    except Exception as e:
        logger.error(f"Error in callback query: {e}")
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
        )

async def handle_help(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    help_text = (
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1. *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á:*\n"
        "   ‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'\n\n"
        "2. *–†–∞–±–æ—Ç–∞ —Å –¥–æ—Å–∫–∞–º–∏:*\n"
        "   ‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ '–ú–æ–∏ –¥–æ—Å–∫–∏'\n"
        "   ‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –∑–∞–¥–∞—á\n\n"
        "3. *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
        "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ #—Ç—ç–≥–∏ –¥–ª—è –º–µ—Ç–æ–∫\n"
        "   ‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "   ‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Ä–æ–∫–∏ '–¥–æ –î–î.–ú–ú.–ì–ì–ì–ì'\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/boards - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å–∫–∏\n"
        "/create - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    
    await message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
@router.post("/{token}")
async def telegram_webhook(token: str, request: Request):
    if token != settings.TELEGRAM_BOT_TOKEN:
        return {"error": "Invalid token"}
    
    try:
        update_data = await request.json()
        logger.info(f"Received update: {update_data}")
        
        update = Update.de_json(update_data, bot)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
        if update.callback_query:
            await handle_callback_query(update)
            return {"ok": True}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.message:
            user_id = update.message.from_user.id
            user_state = state_manager.get_user_state(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if getattr(update.message, 'forward_date', None):
                await handle_forwarded_messages(update)
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            elif update.message.text:
                text = update.message.text
                logger.info(f"Processing text message: {text}")
                
                if text == '/start':
                    await handle_start(update)
                elif text == 'üìä –ú–æ–∏ –¥–æ—Å–∫–∏' or text == '/boards':
                    await handle_boards(update.message)
                elif text == 'üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' or text == '/create':
                    user_state.current_action = 'creating_task'
                    await update.message.reply_text(
                        "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                    )
                elif text == '‚ùì –ü–æ–º–æ—â—å' or text == '/help':
                    await handle_help(update.message)
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                elif user_state.current_action == 'creating_task':
                    await handle_direct_task_creation(update)
                
        return {"ok": True}
        
    except Exception as e:
        logger.error(f"Error processing update: {e}", exc_info=True)
        return {"error": str(e)}

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = SessionLocal()
        user = db.query(User).filter(User.telegram_id == str(update.effective_user.id)).first()
        
        if not user:
            user = User(telegram_id=str(update.effective_user.id))
            db.add(user)
            db.commit()
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            keyboard = [
                [
                    InlineKeyboardButton("English üá¨üáß", callback_data="lang_en"),
                    InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "Please select your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            if user.is_authorized:
                await update.message.reply_text(
                    localization.get_text("welcome_back", language=user.language)
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ —è–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω
                await request_trello_token(update, context)
                
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {str(e)}")
        await update.message.reply_text("An error occurred. Please try again.")
    finally:
        db.close()

async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    query = update.callback_query
    lang = query.data.split('_')[1]
    
    try:
        db = SessionLocal()
        user = db.query(User).filter(User.telegram_id == str(update.effective_user.id)).first()
        
        if user:
            user.language = lang
            db.commit()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            localization.set_language(lang)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.edit_text(localization.get_text("welcome_message"))
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω Trello
            await request_trello_token(update, context)
            
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞: {str(e)}")
        await query.message.edit_text("An error occurred. Please try again. /start")
    finally:
        db.close()

async def request_trello_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ Trello."""
    message = """
–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å API —Ç–æ–∫–µ–Ω Trello. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://trello.com/app-key
2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Trello
3. –ù–∞–∂–º–∏—Ç–µ "Generate a Token"
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
"""
    await update.effective_message.reply_text(message)
    context.user_data['waiting_for'] = 'trello_token'

async def handle_trello_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ Trello."""
    token = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
    if not TrelloService.validate_token_format(token):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 64 —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã a-f). "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Trello –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    trello_service = TrelloService(token)
    if not trello_service.validate_token():
        await update.message.reply_text(
            "‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–∫–µ–Ω "
            "–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await update.message.reply_text(
        "‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è "
        "–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Trello:"
    )
    context.user_data['trello_token'] = token
    context.user_data['waiting_for'] = 'email'

async def handle_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    email = update.message.text
    token = context.user_data.get('trello_token')
    
    if not token:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å /start")
        return
    
    trello_service = TrelloService(token)
    if not trello_service.verify_user_email(email):
        await update.message.reply_text(
            "‚ùå Email –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ Trello. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞."
        )
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = SessionLocal()
        user = db.query(User).filter(User.telegram_id == str(update.effective_user.id)).first()
        
        if user:
            user.email = email
            user.trello_token = token
            user.is_authorized = True
            db.commit()
            
            await update.message.reply_text(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
            
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

async def change_token_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞."""
    await request_trello_token(update, context)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    waiting_for = context.user_data.get('waiting_for')
    
    if waiting_for == 'trello_token':
        await handle_trello_token(update, context)
    elif waiting_for == 'email':
        await handle_email(update, context)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        pass